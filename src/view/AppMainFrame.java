/*
 * Copyright (c) 2020, Bear Au Jus - ジュースとくま
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package view;

import engine.AppCore;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.text.DecimalFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.DefaultCaret;
import model.ApplicationDetails;
import model.DataStructure;
import tools.DIRTools;
import tools.URLTools;

/**
 *
 * @author Bear Au Jus - ジュースとくま
 */
public class AppMainFrame extends javax.swing.JFrame {

    private File selectedFile;
    private Thread t;
    private boolean forceDownload;
    public boolean cameFromActivatingServer;

    public AppMainFrame() {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        initComponents();
        DefaultCaret caret = (DefaultCaret) c_ta_console.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        p_serverProperties_sp.setVisible(false);
        p_serverMainJar_smj.setVisible(false);
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        p_serverMain_sm = new javax.swing.JPanel();
        sm_l_publicIPAddress = new javax.swing.JLabel();
        sm_l_privateIPAddress = new javax.swing.JLabel();
        sm_l_port = new javax.swing.JLabel();
        sm_t_publicIPAddress = new javax.swing.JTextField();
        sm_t_port = new javax.swing.JTextField();
        sm_t_privateIPAddress = new javax.swing.JTextField();
        sm_p_shareThisToYourFriend = new javax.swing.JPanel();
        sm_t_shareThisToYourFriend = new javax.swing.JTextField();
        sm_b_copy = new javax.swing.JButton();
        sm_b_refreshNow = new javax.swing.JButton();
        sm_p_manageServerExecutorParameter = new javax.swing.JPanel();
        sm_l_xms = new javax.swing.JLabel();
        sm_l_xmsGB = new javax.swing.JLabel();
        sm_l_xmx = new javax.swing.JLabel();
        sm_l_xmxGB = new javax.swing.JLabel();
        sm_js_xms = new javax.swing.JSpinner();
        sm_js_xmx = new javax.swing.JSpinner();
        sm_b_activeServer = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        sm_l_status = new javax.swing.JLabel();
        sm_t_status = new javax.swing.JTextField();
        sm_l_serverState = new javax.swing.JLabel();
        p_serverProperties_sp = new javax.swing.JPanel();
        sp_l_levelName = new javax.swing.JLabel();
        sp_l_allowNether = new javax.swing.JLabel();
        sp_l_spawnMonsters = new javax.swing.JLabel();
        sp_l_hardcore = new javax.swing.JLabel();
        sp_l_spawnNPCS = new javax.swing.JLabel();
        sp_t_levelName = new javax.swing.JTextField();
        sp_ch_allowNether = new javax.swing.JCheckBox();
        sp_ch_spawnMonsters = new javax.swing.JCheckBox();
        sp_ch_hardcore = new javax.swing.JCheckBox();
        sp_ch_spawnNPCS = new javax.swing.JCheckBox();
        sp_b_autoServerIP = new javax.swing.JButton();
        sp_b_save = new javax.swing.JButton();
        sp_b_resetToDefaultSettings = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sp_l_serverPort = new javax.swing.JLabel();
        sp_t_serverPort = new javax.swing.JTextField();
        sp_l_onlineMode = new javax.swing.JLabel();
        sp_ch_onlineMode = new javax.swing.JCheckBox();
        sp_l_rconPort = new javax.swing.JLabel();
        sp_t_serverRconPort = new javax.swing.JTextField();
        sp_l_motd = new javax.swing.JLabel();
        sp_t_motd = new javax.swing.JTextField();
        sp_l_gamemode = new javax.swing.JLabel();
        sp_cb_gameMode = new javax.swing.JComboBox<>();
        sp_cb_difficulty = new javax.swing.JComboBox<>();
        sp_l_difficulty = new javax.swing.JLabel();
        sp_l_pvp = new javax.swing.JLabel();
        sp_ch_pvp = new javax.swing.JCheckBox();
        sp_l_serverIP = new javax.swing.JLabel();
        sp_t_serverIP = new javax.swing.JTextField();
        p_serverMainJar_smj = new javax.swing.JPanel();
        smj_b_save = new javax.swing.JButton();
        smj_b_refreshJarList = new javax.swing.JButton();
        smj_b_openFolder = new javax.swing.JButton();
        smj_p_addServerJar = new javax.swing.JPanel();
        smj_l_statusDownload = new javax.swing.JLabel();
        smj_l_progres = new javax.swing.JLabel();
        smj_pb_progress = new javax.swing.JProgressBar();
        smj_rb_fromExistingLink = new javax.swing.JRadioButton();
        smj_t_fromExistingLink = new javax.swing.JTextField();
        smj_rb_fromExistingFile = new javax.swing.JRadioButton();
        smj_t_fromExistingFile = new javax.swing.JTextField();
        smj_b_selectFile = new javax.swing.JButton();
        smj_b_addJar = new javax.swing.JButton();
        smj_l_executorMainJar = new javax.swing.JLabel();
        smj_cb_executorMainJar = new javax.swing.JComboBox<>();
        p_about_ab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        smj_bg_addServerJar = new javax.swing.ButtonGroup();
        bg_menu = new javax.swing.ButtonGroup();
        p_console_c = new javax.swing.JPanel();
        c_jsp_console = new javax.swing.JScrollPane();
        c_ta_console = new javax.swing.JTextArea();
        c_t_console = new javax.swing.JTextField();
        c_b_enter = new javax.swing.JButton();
        p_appMenu_am = new javax.swing.JPanel();
        am_tb_serverMain = new javax.swing.JToggleButton();
        am_tb_serverProperties = new javax.swing.JToggleButton();
        am_tb_serverMainJar = new javax.swing.JToggleButton();
        am_tb_about = new javax.swing.JToggleButton();
        am_b_exit = new javax.swing.JButton();

        p_serverMain_sm.setBackground(new java.awt.Color(48, 48, 48));
        p_serverMain_sm.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server Main", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        sm_l_publicIPAddress.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_publicIPAddress.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_publicIPAddress.setText("Public IP Address");

        sm_l_privateIPAddress.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_privateIPAddress.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_privateIPAddress.setText("Private IP Address");

        sm_l_port.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_port.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_port.setText("Port");

        sm_t_publicIPAddress.setEditable(false);
        sm_t_publicIPAddress.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        sm_t_publicIPAddress.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sm_t_publicIPAddress.setText("-");

        sm_t_port.setEditable(false);
        sm_t_port.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        sm_t_port.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sm_t_port.setText("-");

        sm_t_privateIPAddress.setEditable(false);
        sm_t_privateIPAddress.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        sm_t_privateIPAddress.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sm_t_privateIPAddress.setText("-");

        sm_p_shareThisToYourFriend.setBackground(new java.awt.Color(40, 40, 40));
        sm_p_shareThisToYourFriend.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Share This To Your Frieds !", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        sm_p_shareThisToYourFriend.setForeground(new java.awt.Color(255, 255, 255));

        sm_t_shareThisToYourFriend.setEditable(false);
        sm_t_shareThisToYourFriend.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        sm_t_shareThisToYourFriend.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sm_t_shareThisToYourFriend.setText("-");

        sm_b_copy.setBackground(new java.awt.Color(0, 136, 67));
        sm_b_copy.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_b_copy.setForeground(new java.awt.Color(255, 255, 255));
        sm_b_copy.setText("Copy");
        sm_b_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sm_b_copyActionPerformed(evt);
            }
        });

        sm_b_refreshNow.setBackground(new java.awt.Color(0, 136, 67));
        sm_b_refreshNow.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_b_refreshNow.setForeground(new java.awt.Color(255, 255, 255));
        sm_b_refreshNow.setText("Refresh Now ( Auto in : 120 sec )");
        sm_b_refreshNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sm_b_refreshNowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sm_p_shareThisToYourFriendLayout = new javax.swing.GroupLayout(sm_p_shareThisToYourFriend);
        sm_p_shareThisToYourFriend.setLayout(sm_p_shareThisToYourFriendLayout);
        sm_p_shareThisToYourFriendLayout.setHorizontalGroup(
            sm_p_shareThisToYourFriendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sm_p_shareThisToYourFriendLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sm_p_shareThisToYourFriendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sm_b_refreshNow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sm_p_shareThisToYourFriendLayout.createSequentialGroup()
                        .addComponent(sm_t_shareThisToYourFriend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sm_b_copy, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        sm_p_shareThisToYourFriendLayout.setVerticalGroup(
            sm_p_shareThisToYourFriendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sm_p_shareThisToYourFriendLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sm_p_shareThisToYourFriendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sm_b_copy, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sm_t_shareThisToYourFriend, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_b_refreshNow)
                .addContainerGap())
        );

        sm_p_shareThisToYourFriendLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sm_b_copy, sm_t_shareThisToYourFriend});

        sm_p_manageServerExecutorParameter.setBackground(new java.awt.Color(40, 40, 40));
        sm_p_manageServerExecutorParameter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manage Server Executor Parameter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        sm_l_xms.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_xms.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_xms.setText("XMS");

        sm_l_xmsGB.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_xmsGB.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_xmsGB.setText("GB");

        sm_l_xmx.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_xmx.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_xmx.setText("XMX");

        sm_l_xmxGB.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_xmxGB.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_xmxGB.setText("GB");

        sm_js_xms.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        sm_js_xmx.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout sm_p_manageServerExecutorParameterLayout = new javax.swing.GroupLayout(sm_p_manageServerExecutorParameter);
        sm_p_manageServerExecutorParameter.setLayout(sm_p_manageServerExecutorParameterLayout);
        sm_p_manageServerExecutorParameterLayout.setHorizontalGroup(
            sm_p_manageServerExecutorParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sm_p_manageServerExecutorParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sm_l_xms, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_js_xms, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_l_xmsGB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(sm_l_xmx, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_js_xmx, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_l_xmxGB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sm_p_manageServerExecutorParameterLayout.setVerticalGroup(
            sm_p_manageServerExecutorParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sm_p_manageServerExecutorParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sm_p_manageServerExecutorParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sm_p_manageServerExecutorParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sm_l_xmx)
                        .addComponent(sm_js_xmx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sm_l_xmxGB))
                    .addGroup(sm_p_manageServerExecutorParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sm_l_xms)
                        .addComponent(sm_js_xms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sm_l_xmsGB)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sm_b_activeServer.setBackground(new java.awt.Color(0, 136, 67));
        sm_b_activeServer.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_b_activeServer.setForeground(new java.awt.Color(255, 255, 255));
        sm_b_activeServer.setText("Active Server");
        sm_b_activeServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sm_b_activeServerActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 136, 67));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        sm_l_status.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_l_status.setForeground(new java.awt.Color(255, 255, 255));
        sm_l_status.setText("Status");

        sm_t_status.setEditable(false);
        sm_t_status.setBackground(new java.awt.Color(255, 255, 255));
        sm_t_status.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sm_t_status.setForeground(java.awt.Color.red);
        sm_t_status.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sm_t_status.setText("OFFLINE");

        sm_l_serverState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/serverOffline.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sm_l_status, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_t_status, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_l_serverState)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sm_l_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3))
                    .addComponent(sm_l_serverState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sm_t_status))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout p_serverMain_smLayout = new javax.swing.GroupLayout(p_serverMain_sm);
        p_serverMain_sm.setLayout(p_serverMain_smLayout);
        p_serverMain_smLayout.setHorizontalGroup(
            p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_serverMain_smLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sm_p_shareThisToYourFriend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sm_p_manageServerExecutorParameter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(p_serverMain_smLayout.createSequentialGroup()
                        .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sm_b_activeServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, p_serverMain_smLayout.createSequentialGroup()
                                    .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(sm_l_publicIPAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sm_l_privateIPAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                        .addComponent(sm_l_port, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sm_t_privateIPAddress)
                                        .addComponent(sm_t_publicIPAddress)
                                        .addComponent(sm_t_port)))))
                        .addContainerGap())))
        );
        p_serverMain_smLayout.setVerticalGroup(
            p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_serverMain_smLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sm_l_publicIPAddress)
                    .addComponent(sm_t_publicIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sm_l_privateIPAddress)
                    .addComponent(sm_t_privateIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_serverMain_smLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sm_l_port)
                    .addComponent(sm_t_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sm_p_shareThisToYourFriend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_p_manageServerExecutorParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sm_b_activeServer, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        p_serverMain_smLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sm_l_port, sm_l_privateIPAddress, sm_l_publicIPAddress});

        p_serverProperties_sp.setBackground(new java.awt.Color(48, 48, 48));
        p_serverProperties_sp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server Properties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        p_serverProperties_sp.setForeground(new java.awt.Color(255, 255, 255));

        sp_l_levelName.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_levelName.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_levelName.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_levelName.setText("Level Name");

        sp_l_allowNether.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_allowNether.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_allowNether.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_allowNether.setText("Allow Nether");

        sp_l_spawnMonsters.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_spawnMonsters.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_spawnMonsters.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_spawnMonsters.setText("Spawn Monsters");

        sp_l_hardcore.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_hardcore.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_hardcore.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_hardcore.setText("Hardcore");

        sp_l_spawnNPCS.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_spawnNPCS.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_spawnNPCS.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_spawnNPCS.setText("Spawn NPCS");

        sp_t_levelName.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        sp_ch_allowNether.setBackground(new java.awt.Color(48, 48, 48));
        sp_ch_allowNether.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_ch_allowNether.setForeground(new java.awt.Color(255, 255, 255));
        sp_ch_allowNether.setText("True");

        sp_ch_spawnMonsters.setBackground(new java.awt.Color(48, 48, 48));
        sp_ch_spawnMonsters.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_ch_spawnMonsters.setForeground(new java.awt.Color(255, 255, 255));
        sp_ch_spawnMonsters.setText("True");

        sp_ch_hardcore.setBackground(new java.awt.Color(48, 48, 48));
        sp_ch_hardcore.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_ch_hardcore.setForeground(new java.awt.Color(255, 255, 255));
        sp_ch_hardcore.setText("True");

        sp_ch_spawnNPCS.setBackground(new java.awt.Color(48, 48, 48));
        sp_ch_spawnNPCS.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_ch_spawnNPCS.setForeground(new java.awt.Color(255, 255, 255));
        sp_ch_spawnNPCS.setText("True");

        sp_b_autoServerIP.setBackground(new java.awt.Color(0, 136, 67));
        sp_b_autoServerIP.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_b_autoServerIP.setForeground(new java.awt.Color(255, 255, 255));
        sp_b_autoServerIP.setText("Auto");
        sp_b_autoServerIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sp_b_autoServerIPActionPerformed(evt);
            }
        });

        sp_b_save.setBackground(new java.awt.Color(0, 136, 67));
        sp_b_save.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_b_save.setForeground(new java.awt.Color(255, 255, 255));
        sp_b_save.setText("Save");
        sp_b_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sp_b_saveActionPerformed(evt);
            }
        });

        sp_b_resetToDefaultSettings.setBackground(new java.awt.Color(0, 136, 67));
        sp_b_resetToDefaultSettings.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_b_resetToDefaultSettings.setForeground(new java.awt.Color(255, 255, 255));
        sp_b_resetToDefaultSettings.setText("Reset To Default Settings");
        sp_b_resetToDefaultSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sp_b_resetToDefaultSettingsActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 136, 67));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        sp_l_serverPort.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_serverPort.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_serverPort.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_serverPort.setText("Server Port");

        sp_t_serverPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        sp_l_onlineMode.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_onlineMode.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_onlineMode.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_onlineMode.setText("Online Mode");

        sp_ch_onlineMode.setBackground(new java.awt.Color(0, 136, 67));
        sp_ch_onlineMode.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_ch_onlineMode.setForeground(new java.awt.Color(255, 255, 255));
        sp_ch_onlineMode.setText("True");

        sp_l_rconPort.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_rconPort.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_rconPort.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_rconPort.setText("Rcon Port");

        sp_t_serverRconPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        sp_l_motd.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_motd.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_motd.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_motd.setText("MOTD");

        sp_t_motd.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        sp_l_gamemode.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_gamemode.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_gamemode.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_gamemode.setText("Game Mode");

        sp_cb_gameMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "survival", "creative", "adventure", "hardcore", "spectator" }));

        sp_cb_difficulty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "peaceful", "easy", "normal", "hard" }));

        sp_l_difficulty.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_difficulty.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_difficulty.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_difficulty.setText("Difficulty");

        sp_l_pvp.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_pvp.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_pvp.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_pvp.setText("PVP");

        sp_ch_pvp.setBackground(new java.awt.Color(0, 136, 67));
        sp_ch_pvp.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_ch_pvp.setForeground(new java.awt.Color(255, 255, 255));
        sp_ch_pvp.setText("True");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(sp_l_onlineMode)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sp_t_serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sp_ch_onlineMode, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(sp_l_pvp, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sp_ch_pvp, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(sp_l_rconPort, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sp_t_serverRconPort, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(sp_l_difficulty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sp_l_serverPort, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                            .addComponent(sp_l_motd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(sp_cb_difficulty, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sp_l_gamemode, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sp_cb_gameMode, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sp_t_motd))))
                .addGap(10, 10, 10))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sp_l_gamemode, sp_l_pvp, sp_l_rconPort});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_l_serverPort)
                    .addComponent(sp_t_serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sp_t_serverRconPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sp_l_rconPort))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_l_onlineMode)
                    .addComponent(sp_ch_onlineMode)
                    .addComponent(sp_ch_pvp)
                    .addComponent(sp_l_pvp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_l_motd)
                    .addComponent(sp_t_motd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_cb_gameMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sp_l_difficulty)
                    .addComponent(sp_cb_difficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sp_l_gamemode))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sp_l_rconPort, sp_l_serverPort});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sp_l_difficulty, sp_l_gamemode, sp_l_pvp});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sp_cb_difficulty, sp_cb_gameMode});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sp_t_serverPort, sp_t_serverRconPort});

        sp_l_serverIP.setBackground(new java.awt.Color(255, 255, 255));
        sp_l_serverIP.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        sp_l_serverIP.setForeground(new java.awt.Color(255, 255, 255));
        sp_l_serverIP.setText("Server IP");

        sp_t_serverIP.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout p_serverProperties_spLayout = new javax.swing.GroupLayout(p_serverProperties_sp);
        p_serverProperties_sp.setLayout(p_serverProperties_spLayout);
        p_serverProperties_spLayout.setHorizontalGroup(
            p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                        .addComponent(sp_b_save, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sp_b_resetToDefaultSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_serverProperties_spLayout.createSequentialGroup()
                        .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                                .addComponent(sp_l_spawnMonsters)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sp_ch_spawnMonsters, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                                .addComponent(sp_l_spawnNPCS, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sp_ch_spawnNPCS, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                                .addComponent(sp_l_allowNether)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sp_ch_allowNether, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_serverProperties_spLayout.createSequentialGroup()
                                .addComponent(sp_l_hardcore)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sp_ch_hardcore, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_serverProperties_spLayout.createSequentialGroup()
                        .addComponent(sp_l_serverIP, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sp_t_serverIP, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sp_b_autoServerIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_serverProperties_spLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sp_l_levelName, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(sp_t_levelName, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        p_serverProperties_spLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sp_l_allowNether, sp_l_hardcore, sp_l_spawnMonsters, sp_l_spawnNPCS});

        p_serverProperties_spLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sp_ch_spawnMonsters, sp_ch_spawnNPCS});

        p_serverProperties_spLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sp_b_resetToDefaultSettings, sp_b_save});

        p_serverProperties_spLayout.setVerticalGroup(
            p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_b_autoServerIP)
                    .addComponent(sp_l_serverIP)
                    .addComponent(sp_t_serverIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_l_levelName)
                    .addComponent(sp_t_levelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                        .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sp_l_spawnMonsters)
                            .addComponent(sp_ch_spawnMonsters))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sp_l_spawnNPCS)
                            .addComponent(sp_ch_spawnNPCS)))
                    .addGroup(p_serverProperties_spLayout.createSequentialGroup()
                        .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sp_l_allowNether)
                            .addComponent(sp_ch_allowNether))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sp_l_hardcore)
                            .addComponent(sp_ch_hardcore))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(p_serverProperties_spLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sp_b_save, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sp_b_resetToDefaultSettings))
                .addContainerGap())
        );

        p_serverProperties_spLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sp_b_resetToDefaultSettings, sp_b_save});

        p_serverMainJar_smj.setBackground(new java.awt.Color(48, 48, 48));
        p_serverMainJar_smj.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server Main Jar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        smj_b_save.setBackground(new java.awt.Color(0, 136, 67));
        smj_b_save.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_b_save.setForeground(new java.awt.Color(255, 255, 255));
        smj_b_save.setText("Save");
        smj_b_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smj_b_saveActionPerformed(evt);
            }
        });

        smj_b_refreshJarList.setBackground(new java.awt.Color(0, 136, 67));
        smj_b_refreshJarList.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_b_refreshJarList.setForeground(new java.awt.Color(255, 255, 255));
        smj_b_refreshJarList.setText("Refresh Jar List");
        smj_b_refreshJarList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smj_b_refreshJarListActionPerformed(evt);
            }
        });

        smj_b_openFolder.setBackground(new java.awt.Color(0, 136, 67));
        smj_b_openFolder.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_b_openFolder.setForeground(new java.awt.Color(255, 255, 255));
        smj_b_openFolder.setText("Open Folder Server Jar");
        smj_b_openFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smj_b_openFolderActionPerformed(evt);
            }
        });

        smj_p_addServerJar.setBackground(new java.awt.Color(40, 40, 40));
        smj_p_addServerJar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Server Jar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        smj_p_addServerJar.setForeground(new java.awt.Color(255, 255, 255));

        smj_l_statusDownload.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_l_statusDownload.setForeground(new java.awt.Color(255, 255, 255));
        smj_l_statusDownload.setText("Ready");

        smj_l_progres.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_l_progres.setForeground(new java.awt.Color(255, 255, 255));
        smj_l_progres.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        smj_l_progres.setText("0.0 MB / 0.0 MB");

        smj_rb_fromExistingLink.setBackground(new java.awt.Color(40, 40, 40));
        smj_bg_addServerJar.add(smj_rb_fromExistingLink);
        smj_rb_fromExistingLink.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_rb_fromExistingLink.setForeground(new java.awt.Color(255, 255, 255));
        smj_rb_fromExistingLink.setText("From Existing Link");
        smj_rb_fromExistingLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smj_rb_fromExistingLinkActionPerformed(evt);
            }
        });

        smj_rb_fromExistingFile.setBackground(new java.awt.Color(40, 40, 40));
        smj_bg_addServerJar.add(smj_rb_fromExistingFile);
        smj_rb_fromExistingFile.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_rb_fromExistingFile.setForeground(new java.awt.Color(255, 255, 255));
        smj_rb_fromExistingFile.setText("From Existing File");
        smj_rb_fromExistingFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smj_rb_fromExistingFileActionPerformed(evt);
            }
        });

        smj_t_fromExistingFile.setEditable(false);

        smj_b_selectFile.setText("Select File");
        smj_b_selectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smj_b_selectFileActionPerformed(evt);
            }
        });

        smj_b_addJar.setBackground(new java.awt.Color(0, 136, 67));
        smj_b_addJar.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_b_addJar.setForeground(new java.awt.Color(255, 255, 255));
        smj_b_addJar.setText("Add Jar");
        smj_b_addJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smj_b_addJarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout smj_p_addServerJarLayout = new javax.swing.GroupLayout(smj_p_addServerJar);
        smj_p_addServerJar.setLayout(smj_p_addServerJarLayout);
        smj_p_addServerJarLayout.setHorizontalGroup(
            smj_p_addServerJarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smj_p_addServerJarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(smj_p_addServerJarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(smj_pb_progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(smj_b_addJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(smj_t_fromExistingLink)
                    .addGroup(smj_p_addServerJarLayout.createSequentialGroup()
                        .addComponent(smj_t_fromExistingFile, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(smj_b_selectFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(smj_p_addServerJarLayout.createSequentialGroup()
                        .addGroup(smj_p_addServerJarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(smj_rb_fromExistingLink)
                            .addComponent(smj_rb_fromExistingFile))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, smj_p_addServerJarLayout.createSequentialGroup()
                        .addComponent(smj_l_statusDownload)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(smj_l_progres, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        smj_p_addServerJarLayout.setVerticalGroup(
            smj_p_addServerJarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smj_p_addServerJarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smj_rb_fromExistingLink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(smj_t_fromExistingLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(smj_rb_fromExistingFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smj_p_addServerJarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smj_t_fromExistingFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smj_b_selectFile))
                .addGap(18, 18, 18)
                .addComponent(smj_pb_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(smj_p_addServerJarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smj_l_progres)
                    .addComponent(smj_l_statusDownload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(smj_b_addJar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        smj_l_executorMainJar.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        smj_l_executorMainJar.setForeground(new java.awt.Color(255, 255, 255));
        smj_l_executorMainJar.setText("Executor Main Jar");

        smj_cb_executorMainJar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout p_serverMainJar_smjLayout = new javax.swing.GroupLayout(p_serverMainJar_smj);
        p_serverMainJar_smj.setLayout(p_serverMainJar_smjLayout);
        p_serverMainJar_smjLayout.setHorizontalGroup(
            p_serverMainJar_smjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_serverMainJar_smjLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_serverMainJar_smjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(smj_b_save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(p_serverMainJar_smjLayout.createSequentialGroup()
                        .addComponent(smj_b_refreshJarList, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(smj_b_openFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(p_serverMainJar_smjLayout.createSequentialGroup()
                        .addComponent(smj_l_executorMainJar, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(smj_cb_executorMainJar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(smj_p_addServerJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        p_serverMainJar_smjLayout.setVerticalGroup(
            p_serverMainJar_smjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_serverMainJar_smjLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_serverMainJar_smjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smj_cb_executorMainJar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smj_l_executorMainJar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(smj_b_save, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(p_serverMainJar_smjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smj_b_refreshJarList, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smj_b_openFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(smj_p_addServerJar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        p_about_ab.setBackground(new java.awt.Color(48, 48, 48));
        p_about_ab.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "About", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/serverOnline.gif"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Minecraft Server Gui is graphical user interface (GUI) tool for Minecraft");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Server. It allows you to run server more easier and manage server data");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ways. You can also customized your main server JAR,");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText(" for example like spiggot or bukkit ! ");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel10.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Greetings People !");
        jLabel10.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel11.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("My name is 'Haryo', @Bear Au Jus. I currently studying Bachelor at ");
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel16.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("I love to code, and working arround the computer :)");
        jLabel16.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel18.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("'Maranatha Christian University' in the 'fourth' semester.");
        jLabel18.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jButton1.setBackground(new java.awt.Color(0, 136, 67));
        jButton1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Donate Me !");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Would you support me ? You can buy me a or some coffee ! :D");

        jPanel3.setBackground(new java.awt.Color(0, 136, 67));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("UD Digi Kyokasho NK-R", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("[ Minecraft Server GUI ]");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("An Ultimate Tools For Your Minecraft Servers ! ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel12.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("About Application :");
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel14.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Creator :");
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout p_about_abLayout = new javax.swing.GroupLayout(p_about_ab);
        p_about_ab.setLayout(p_about_abLayout);
        p_about_abLayout.setHorizontalGroup(
            p_about_abLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_about_abLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_about_abLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_about_abLayout.createSequentialGroup()
                        .addGroup(p_about_abLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(p_about_abLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(p_about_abLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13))
                        .addGap(0, 80, Short.MAX_VALUE))
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        p_about_abLayout.setVerticalGroup(
            p_about_abLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_about_abLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(p_about_abLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(p_about_abLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel5)))
                .addGap(0, 0, 0)
                .addComponent(jLabel6)
                .addGap(0, 0, 0)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addGap(11, 11, 11)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel11)
                .addGap(0, 0, 0)
                .addComponent(jLabel18)
                .addGap(0, 0, 0)
                .addComponent(jLabel16)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(ApplicationDetails.getAppTitleForMain());
        setResizable(false);
        setSize(new java.awt.Dimension(800, 670));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        p_console_c.setBackground(new java.awt.Color(40, 40, 40));
        p_console_c.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Console", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        c_ta_console.setEditable(false);
        c_ta_console.setColumns(20);
        c_ta_console.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        c_ta_console.setLineWrap(true);
        c_ta_console.setTabSize(0);
        c_jsp_console.setViewportView(c_ta_console);

        c_b_enter.setBackground(new java.awt.Color(0, 136, 67));
        c_b_enter.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        c_b_enter.setForeground(new java.awt.Color(255, 255, 255));
        c_b_enter.setText("Enter");
        c_b_enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_b_enterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_console_cLayout = new javax.swing.GroupLayout(p_console_c);
        p_console_c.setLayout(p_console_cLayout);
        p_console_cLayout.setHorizontalGroup(
            p_console_cLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_console_cLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_console_cLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(c_jsp_console, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                    .addGroup(p_console_cLayout.createSequentialGroup()
                        .addComponent(c_t_console)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_b_enter, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        p_console_cLayout.setVerticalGroup(
            p_console_cLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_console_cLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(c_jsp_console, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_console_cLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(c_b_enter)
                    .addComponent(c_t_console, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        p_console_cLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {c_b_enter, c_t_console});

        getContentPane().add(p_console_c, java.awt.BorderLayout.PAGE_END);

        p_appMenu_am.setBackground(new java.awt.Color(30, 30, 30));
        p_appMenu_am.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Menu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semibold", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        p_appMenu_am.setForeground(new java.awt.Color(255, 255, 255));

        am_tb_serverMain.setBackground(new java.awt.Color(0, 136, 67));
        bg_menu.add(am_tb_serverMain);
        am_tb_serverMain.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        am_tb_serverMain.setForeground(new java.awt.Color(255, 255, 255));
        am_tb_serverMain.setText("Server Main");
        am_tb_serverMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                am_tb_serverMainActionPerformed(evt);
            }
        });

        am_tb_serverProperties.setBackground(new java.awt.Color(0, 136, 67));
        bg_menu.add(am_tb_serverProperties);
        am_tb_serverProperties.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        am_tb_serverProperties.setForeground(new java.awt.Color(255, 255, 255));
        am_tb_serverProperties.setText("Server Properties");
        am_tb_serverProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                am_tb_serverPropertiesActionPerformed(evt);
            }
        });

        am_tb_serverMainJar.setBackground(new java.awt.Color(0, 136, 67));
        bg_menu.add(am_tb_serverMainJar);
        am_tb_serverMainJar.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        am_tb_serverMainJar.setForeground(new java.awt.Color(255, 255, 255));
        am_tb_serverMainJar.setText("Server Main JAR");
        am_tb_serverMainJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                am_tb_serverMainJarActionPerformed(evt);
            }
        });

        am_tb_about.setBackground(new java.awt.Color(0, 136, 67));
        bg_menu.add(am_tb_about);
        am_tb_about.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        am_tb_about.setForeground(new java.awt.Color(255, 255, 255));
        am_tb_about.setText("About & Donate");
        am_tb_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                am_tb_aboutActionPerformed(evt);
            }
        });

        am_b_exit.setBackground(new java.awt.Color(0, 136, 67));
        am_b_exit.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        am_b_exit.setForeground(new java.awt.Color(255, 255, 255));
        am_b_exit.setText("Exit");
        am_b_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                am_b_exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_appMenu_amLayout = new javax.swing.GroupLayout(p_appMenu_am);
        p_appMenu_am.setLayout(p_appMenu_amLayout);
        p_appMenu_amLayout.setHorizontalGroup(
            p_appMenu_amLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_appMenu_amLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_appMenu_amLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(am_b_exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(am_tb_serverProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(am_tb_serverMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(am_tb_serverMainJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(am_tb_about, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        p_appMenu_amLayout.setVerticalGroup(
            p_appMenu_amLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_appMenu_amLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(am_tb_serverMain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(am_tb_serverProperties)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(am_tb_serverMainJar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 248, Short.MAX_VALUE)
                .addComponent(am_tb_about)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(am_b_exit)
                .addContainerGap())
        );

        getContentPane().add(p_appMenu_am, java.awt.BorderLayout.LINE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sm_b_activeServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sm_b_activeServerActionPerformed
        activeServer();
    }//GEN-LAST:event_sm_b_activeServerActionPerformed

    private void c_b_enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_b_enterActionPerformed
        if (AppCore.getServerThread().isAlive()) {
            AppCore.getServerThread().addCommand(c_t_console.getText());
            c_t_console.setText("");
        } else {
            c_t_console.setText("");
            AppCore.addConsole("Server is not running.");
        }
    }//GEN-LAST:event_c_b_enterActionPerformed

    private void sm_b_refreshNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sm_b_refreshNowActionPerformed
        AppCore.SERVERTIMEREVENT.IPRefresher_RefreshNow();
    }//GEN-LAST:event_sm_b_refreshNowActionPerformed

    private void sp_b_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sp_b_saveActionPerformed
        setServerProperties();
        AppCore.SERVERPROPERTIES.save();
        initServerProperties();
    }//GEN-LAST:event_sp_b_saveActionPerformed

    private void sp_b_resetToDefaultSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sp_b_resetToDefaultSettingsActionPerformed
        AppCore.SERVERPROPERTIES.reset();
        initServerProperties();
    }//GEN-LAST:event_sp_b_resetToDefaultSettingsActionPerformed

    private void am_b_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_am_b_exitActionPerformed
        showExitConfirm();
    }//GEN-LAST:event_am_b_exitActionPerformed

    private void am_tb_serverPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_am_tb_serverPropertiesActionPerformed
        p_serverMain_sm.setVisible(false);
        p_serverMainJar_smj.setVisible(false);
        p_about_ab.setVisible(false);
        p_serverProperties_sp.setVisible(true);
        this.add(p_serverProperties_sp);
        initServerProperties();
    }//GEN-LAST:event_am_tb_serverPropertiesActionPerformed

    private void am_tb_serverMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_am_tb_serverMainActionPerformed
        p_serverMainJar_smj.setVisible(false);
        p_serverProperties_sp.setVisible(false);
        p_about_ab.setVisible(false);
        p_serverMain_sm.setVisible(true);
        this.add(p_serverMain_sm);
    }//GEN-LAST:event_am_tb_serverMainActionPerformed

    private void sp_b_autoServerIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sp_b_autoServerIPActionPerformed
        sp_t_serverIP.setText(AppCore.SERVERIPTHREAD.getPrivateIP());
    }//GEN-LAST:event_sp_b_autoServerIPActionPerformed

    private void sm_b_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sm_b_copyActionPerformed
        StringSelection stringSelection = new StringSelection(sm_t_shareThisToYourFriend.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
        AppCore.addConsole("Server address copied to cliboard.");
    }//GEN-LAST:event_sm_b_copyActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        showExitConfirm();
    }//GEN-LAST:event_formWindowClosing

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    private void am_tb_serverMainJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_am_tb_serverMainJarActionPerformed
        redirectPanel_serverMainJar();
        AppCore.SERVERJAR.check();
    }//GEN-LAST:event_am_tb_serverMainJarActionPerformed

    private void smj_b_selectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smj_b_selectFileActionPerformed
        JFileChooser jfc = new JFileChooser(new File(System.getProperty("user.dir")));
        jfc.removeChoosableFileFilter(jfc.getFileFilter());
        jfc.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".jar");
                }
            }

            @Override
            public String getDescription() {
                return "JAR File (*.jar)";
            }
        });
        int status = jfc.showOpenDialog(null);
        if (status == 0) {
            selectedFile = jfc.getSelectedFile();
            smj_t_fromExistingFile.setText(selectedFile.getAbsolutePath());
            smj_t_fromExistingFile.setCaretPosition(0);
        }
    }//GEN-LAST:event_smj_b_selectFileActionPerformed

    private void smj_b_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smj_b_saveActionPerformed
        final String input = smj_cb_executorMainJar.getSelectedItem().toString();
        AppCore.CONFIG.setCurrentDefaultJarName(input);
        AppCore.CONFIG.save(input);
        AppCore.SERVERJAR.check();
    }//GEN-LAST:event_smj_b_saveActionPerformed

    private void smj_rb_fromExistingLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smj_rb_fromExistingLinkActionPerformed
        if (!forceDownload) {
            smj_t_fromExistingLink.setEnabled(true);
            smj_t_fromExistingFile.setEnabled(false);
            smj_b_selectFile.setEnabled(false);
            smj_t_fromExistingFile.setText("");
            selectedFile = null;
            smj_b_addJar.setEnabled(true);
            smj_b_addJar.setText("<Html>Download Jar</Html>");
        }
    }//GEN-LAST:event_smj_rb_fromExistingLinkActionPerformed

    private void smj_rb_fromExistingFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smj_rb_fromExistingFileActionPerformed
        if (!forceDownload) {
            smj_t_fromExistingLink.setEnabled(false);
            smj_t_fromExistingFile.setEnabled(true);
            smj_b_selectFile.setEnabled(true);
            smj_t_fromExistingFile.setText("Please select a file !");
            smj_b_addJar.setEnabled(true);
            smj_b_addJar.setText("<Html>Add Jar</Html>");
            smj_t_fromExistingLink.setText("");
        }
    }//GEN-LAST:event_smj_rb_fromExistingFileActionPerformed

    private void smj_b_addJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smj_b_addJarActionPerformed
        if (smj_rb_fromExistingLink.isSelected()) {
            if (URLTools.isURLValid(smj_t_fromExistingLink.getText())) { // url validation
                if (DIRTools.isJarFile(smj_t_fromExistingLink.getText())) { // is jar file ?
                    smj_pb_progress.setStringPainted(true);
                    t = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                URL url = new URL(smj_t_fromExistingLink.getText());
                                URLConnection urlConnection = url.openConnection();
                                urlConnection.connect();
                                long file_size = urlConnection.getContentLength(); // dapetin file sizenya
                                long downloadedFileSize = 0;
                                // downloading data
                                BufferedInputStream in = new BufferedInputStream(url.openStream());
                                try (FileOutputStream fileOutputStream = new FileOutputStream(DataStructure.getFile_tmpDownload())) {
                                    byte dataBuffer[] = new byte[1024];
                                    int bytesRead;
                                    while ((bytesRead = in.read(dataBuffer, 0, 1024)) != -1) {
                                        fileOutputStream.write(dataBuffer, 0, bytesRead);
                                        downloadedFileSize += bytesRead;
                                        final int currentProgress = (int) (((double) downloadedFileSize) / ((double) file_size) * 100d);
                                        setStatus(currentProgress, ((double) file_size), ((double) downloadedFileSize)); // nge set status download, parameter keduanya itu download speed.
                                    }
                                }
                                smj_cb_executorMainJar.setModel(new DefaultComboBoxModel<>(AppCore.SERVERJAR.getCBmodel()));
                                smj_cb_executorMainJar.setSelectedIndex(AppCore.SERVERJAR.getCBSelectedindex());
                                smj_bg_addServerJar.clearSelection();
                                smj_l_statusDownload.setText("Download Completed !");
                                selectedFile = null;
                                smj_t_fromExistingLink.setEnabled(false);
                                smj_t_fromExistingFile.setEnabled(false);
                                smj_t_fromExistingFile.setText("");
                                smj_b_selectFile.setEnabled(false);
                                smj_b_addJar.setEnabled(false);
                                smj_b_addJar.setText("<Html>Add Jar</Html>");
                                AppCore.addConsole(DIRTools.moveDownloadedTmpJar(URLTools.getFileNameFromURL(smj_t_fromExistingLink.getText())));
                                if (forceDownload) {
                                    AppCore.CONFIG.resetMainServerJarOnly();
                                    AppCore.addConsole("Main Server JAR sucessfully reseted to '" + AppCore.SERVERJAR.getCurrentJarName() + "'.");
                                }
                                JOptionPane.showMessageDialog(null, "Download completed !");
                                redirectPanel_serverMainJar();
                                t = null;
                                AppCore.addConsole("Download success.");
                            } catch (IOException e) {
                                AppCore.addConsole("Failed to fetch data, make sure you are connected to the internet !");
                                JOptionPane.showMessageDialog(null, "Download failed, please make sure you are connected to the internet !");
                                redirectPanel_serverMainJar();
                                t = null;
                                AppCore.addConsole("Download failed.");
                            }
                        }

                        private void setStatus(int min, Double fileSize, Double curProgress) {
                            final double fsInMB = fileSize / 1000000d;
                            final double cpInMB = curProgress / 1000000d;
                            smj_l_progres.setText(new DecimalFormat("##.##").format(cpInMB) + " MB / " + new DecimalFormat("##.##").format(fsInMB) + " MB");
                            smj_pb_progress.setValue(min);

                        }
                    });
                    t.start();
                    startedDownloading();
                } else {
                    JOptionPane.showMessageDialog(null, "File is not a JAR file !");
                    smj_t_fromExistingLink.setText("");
                }
            } else {
                JOptionPane.showMessageDialog(null, "URL is invalid !");
                smj_t_fromExistingLink.setText("");
            }
        } else {
            if (selectedFile != null) {
                if (DIRTools.isFilePathExsist(selectedFile)) {
                    smj_pb_progress.setStringPainted(true);
                    t = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                InputStream in = new FileInputStream(selectedFile);
                                long file_size = selectedFile.length(); // dapetin file sizenya
                                long downloadedFileSize = 0;
                                try (FileOutputStream fileOutputStream = new FileOutputStream(DataStructure.getFile_tmpDownload())) {
                                    byte dataBuffer[] = new byte[1024];
                                    int bytesRead;
                                    while ((bytesRead = in.read(dataBuffer, 0, 1024)) != -1) {
                                        fileOutputStream.write(dataBuffer, 0, bytesRead);
                                        downloadedFileSize += bytesRead;
                                        final int currentProgress = (int) (((double) downloadedFileSize) / ((double) file_size) * 100d);
                                        setStatus(currentProgress, ((double) file_size), ((double) downloadedFileSize)); // nge set status download, parameter keduanya itu download speed.
                                    }
                                }
                                smj_cb_executorMainJar.setModel(new DefaultComboBoxModel<>(AppCore.SERVERJAR.getCBmodel()));
                                smj_cb_executorMainJar.setSelectedIndex(AppCore.SERVERJAR.getCBSelectedindex());
                                smj_bg_addServerJar.clearSelection();
                                smj_l_statusDownload.setText("Jar Successfully Added !");
                                selectedFile = null;
                                smj_t_fromExistingLink.setEnabled(false);
                                smj_t_fromExistingFile.setEnabled(false);
                                smj_t_fromExistingLink.setText("");
                                smj_b_selectFile.setEnabled(false);
                                smj_b_addJar.setEnabled(false);
                                smj_b_addJar.setText("Add Jar");
                                AppCore.addConsole(DIRTools.moveCopiedTmpJar(DIRTools.getFileNameFromPath(smj_t_fromExistingFile.getText())));
                                if (forceDownload) {
                                    AppCore.CONFIG.resetMainServerJarOnly();
                                    AppCore.addConsole("Main Server JAR sucessfully reseted to '" + AppCore.SERVERJAR.getCurrentJarName() + "'.");
                                }
                                JOptionPane.showMessageDialog(null, "Adding JAR completed !");
                                redirectPanel_serverMainJar();
                                t = null;
                                selectedFile = null;
                                AppCore.addConsole("Copy success.");
                            } catch (IOException e) {
                                JOptionPane.showMessageDialog(null, "Copy failed !");
                                t = null;
                                selectedFile = null;
                                redirectPanel_serverMainJar();
                                AppCore.addConsole("Copy failed.");
                            }
                        }

                        private void setStatus(int min, Double fileSize, Double curProgress) {
                            final double fsInMB = fileSize / 1000000d;
                            final double cpInMB = curProgress / 1000000d;
                            smj_l_progres.setText(new DecimalFormat("##.##").format(cpInMB) + " MB / " + new DecimalFormat("##.##").format(fsInMB) + " MB");
                            smj_pb_progress.setValue(min);
                        }
                    });
                    t.start();
                    startedAddingJar();
                } else {
                    selectedFile = null;
                    JOptionPane.showMessageDialog(null, "File is not exist !");
                    smj_t_fromExistingFile.setText("Please select a file !");
                }
            } else {
                selectedFile = null;
                JOptionPane.showMessageDialog(null, "Please select file !");
            }
        }
    }//GEN-LAST:event_smj_b_addJarActionPerformed

    private void smj_b_refreshJarListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smj_b_refreshJarListActionPerformed
        AppCore.SERVERJAR.check();
        smj_cb_executorMainJar.setModel(new DefaultComboBoxModel<>(AppCore.SERVERJAR.getCBmodel()));
        smj_cb_executorMainJar.setSelectedIndex(AppCore.SERVERJAR.getCBSelectedindex());
        redirectPanel_serverMainJar();
        AppCore.addConsole("Jar file refreshed.");
    }//GEN-LAST:event_smj_b_refreshJarListActionPerformed

    private void smj_b_openFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smj_b_openFolderActionPerformed
        DIRTools.openFolder(DataStructure.getPath_serverJar());
    }//GEN-LAST:event_smj_b_openFolderActionPerformed

    private void am_tb_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_am_tb_aboutActionPerformed
        p_serverMain_sm.setVisible(false);
        p_serverMainJar_smj.setVisible(false);
        p_serverProperties_sp.setVisible(false);
        p_about_ab.setVisible(true);
        this.add(p_about_ab);
    }//GEN-LAST:event_am_tb_aboutActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        URLTools.openWebpage("https://ko-fi.com/bearaujus");
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton am_b_exit;
    private javax.swing.JToggleButton am_tb_about;
    private javax.swing.JToggleButton am_tb_serverMain;
    private javax.swing.JToggleButton am_tb_serverMainJar;
    private javax.swing.JToggleButton am_tb_serverProperties;
    private javax.swing.ButtonGroup bg_menu;
    public javax.swing.JButton c_b_enter;
    private javax.swing.JScrollPane c_jsp_console;
    public javax.swing.JTextField c_t_console;
    public static javax.swing.JTextArea c_ta_console;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel p_about_ab;
    private javax.swing.JPanel p_appMenu_am;
    private javax.swing.JPanel p_console_c;
    private javax.swing.JPanel p_serverMainJar_smj;
    private javax.swing.JPanel p_serverMain_sm;
    private javax.swing.JPanel p_serverProperties_sp;
    public javax.swing.JButton sm_b_activeServer;
    public javax.swing.JButton sm_b_copy;
    public javax.swing.JButton sm_b_refreshNow;
    public javax.swing.JSpinner sm_js_xms;
    public javax.swing.JSpinner sm_js_xmx;
    private javax.swing.JLabel sm_l_port;
    private javax.swing.JLabel sm_l_privateIPAddress;
    private javax.swing.JLabel sm_l_publicIPAddress;
    public javax.swing.JLabel sm_l_serverState;
    private javax.swing.JLabel sm_l_status;
    private javax.swing.JLabel sm_l_xms;
    private javax.swing.JLabel sm_l_xmsGB;
    private javax.swing.JLabel sm_l_xmx;
    private javax.swing.JLabel sm_l_xmxGB;
    private javax.swing.JPanel sm_p_manageServerExecutorParameter;
    private javax.swing.JPanel sm_p_shareThisToYourFriend;
    private javax.swing.JTextField sm_t_port;
    private javax.swing.JTextField sm_t_privateIPAddress;
    public javax.swing.JTextField sm_t_publicIPAddress;
    public javax.swing.JTextField sm_t_shareThisToYourFriend;
    public javax.swing.JTextField sm_t_status;
    private javax.swing.JButton smj_b_addJar;
    private javax.swing.JButton smj_b_openFolder;
    private javax.swing.JButton smj_b_refreshJarList;
    private javax.swing.JButton smj_b_save;
    private javax.swing.JButton smj_b_selectFile;
    private javax.swing.ButtonGroup smj_bg_addServerJar;
    public javax.swing.JComboBox<String> smj_cb_executorMainJar;
    private javax.swing.JLabel smj_l_executorMainJar;
    private javax.swing.JLabel smj_l_progres;
    private javax.swing.JLabel smj_l_statusDownload;
    private javax.swing.JPanel smj_p_addServerJar;
    private javax.swing.JProgressBar smj_pb_progress;
    private javax.swing.JRadioButton smj_rb_fromExistingFile;
    private javax.swing.JRadioButton smj_rb_fromExistingLink;
    private javax.swing.JTextField smj_t_fromExistingFile;
    private javax.swing.JTextField smj_t_fromExistingLink;
    private javax.swing.JButton sp_b_autoServerIP;
    private javax.swing.JButton sp_b_resetToDefaultSettings;
    private javax.swing.JButton sp_b_save;
    private javax.swing.JComboBox<String> sp_cb_difficulty;
    private javax.swing.JComboBox<String> sp_cb_gameMode;
    private javax.swing.JCheckBox sp_ch_allowNether;
    private javax.swing.JCheckBox sp_ch_hardcore;
    private javax.swing.JCheckBox sp_ch_onlineMode;
    private javax.swing.JCheckBox sp_ch_pvp;
    private javax.swing.JCheckBox sp_ch_spawnMonsters;
    private javax.swing.JCheckBox sp_ch_spawnNPCS;
    private javax.swing.JLabel sp_l_allowNether;
    private javax.swing.JLabel sp_l_difficulty;
    private javax.swing.JLabel sp_l_gamemode;
    private javax.swing.JLabel sp_l_hardcore;
    private javax.swing.JLabel sp_l_levelName;
    private javax.swing.JLabel sp_l_motd;
    private javax.swing.JLabel sp_l_onlineMode;
    private javax.swing.JLabel sp_l_pvp;
    private javax.swing.JLabel sp_l_rconPort;
    private javax.swing.JLabel sp_l_serverIP;
    private javax.swing.JLabel sp_l_serverPort;
    private javax.swing.JLabel sp_l_spawnMonsters;
    private javax.swing.JLabel sp_l_spawnNPCS;
    private javax.swing.JTextField sp_t_levelName;
    private javax.swing.JTextField sp_t_motd;
    private javax.swing.JTextField sp_t_serverIP;
    private javax.swing.JTextField sp_t_serverPort;
    private javax.swing.JTextField sp_t_serverRconPort;
    // End of variables declaration//GEN-END:variables

    public void setConsole() {
        c_ta_console.setText(AppCore.getCONSOLE().toString());
    }

    private void init() {
        AppCore.addConsole("Application Successfully Deployed !");
        this.setLocationRelativeTo(null);
        this.setIconImage(AppCore.APPUI.getAppIcon().getImage());
        this.add(p_serverMain_sm);
        am_tb_serverMain.setSelected(true);
        setStateServerOffline();
        setConsole();
        initServerProperties();
        sm_b_activeServer.setText("Active Server");
        c_b_enter.setEnabled(true);
        sm_l_serverState.setIcon(AppCore.APPUI.getServerOffline());
        c_t_console.setEnabled(false);
        c_b_enter.setEnabled(false);
        enableMenu();
    }

    private void setStateServerOffline() {
        AppCore.SERVERTIMEREVENT.IPRefresher_stop();

        sm_js_xms.setValue(AppCore.SERVEREXEC.getXMS());
        sm_js_xmx.setValue(AppCore.SERVEREXEC.getXMX());
        sm_t_publicIPAddress.setText("-");
        sm_t_privateIPAddress.setText("-");
        sm_t_port.setText("-");
        sm_t_shareThisToYourFriend.setText("-");
        sm_b_refreshNow.setText("<Html>Refresh Now ( Auto in : 120 sec )</Html>");
        sm_b_copy.setText("<Html>Copy</Html>");
        sm_t_publicIPAddress.setEnabled(false);
        sm_t_privateIPAddress.setEnabled(false);
        sm_t_port.setEnabled(false);
        sm_t_shareThisToYourFriend.setEnabled(false);
        sm_b_copy.setEnabled(false);
        sm_b_refreshNow.setEnabled(false);

        disableMenu();
        c_b_enter.setEnabled(false);
        c_t_console.setEnabled(false);
    }

    public void initServerProperties() {
        sp_t_serverIP.setText(AppCore.SERVERPROPERTIES.getServerIP());
        sp_ch_onlineMode.setSelected(Boolean.parseBoolean(AppCore.SERVERPROPERTIES.getOnlineMode()));
        sp_t_serverPort.setText(AppCore.SERVERPROPERTIES.getServerPort());
        sp_t_serverRconPort.setText(AppCore.SERVERPROPERTIES.getRconPort());
        sp_t_motd.setText(AppCore.SERVERPROPERTIES.getMOTD());
        sp_t_levelName.setText(AppCore.SERVERPROPERTIES.getLevelName());
        int pointer = 0;
        for (int i = 0; i < 10; i++) {
            if (sp_cb_difficulty.getModel().getElementAt(i).equals(AppCore.SERVERPROPERTIES.getDifficulty())) {
                break;
            }
            pointer++;
        }
        sp_cb_difficulty.setSelectedIndex(pointer);
        pointer = 0;
        for (int i = 0; i < 10; i++) {
            if (sp_cb_gameMode.getModel().getElementAt(i).equals(AppCore.SERVERPROPERTIES.getGameMode())) {
                break;
            }
            pointer++;
        }
        sp_cb_gameMode.setSelectedIndex(pointer);
        sp_ch_spawnMonsters.setSelected(Boolean.parseBoolean(AppCore.SERVERPROPERTIES.getSpawnMonsters()));
        sp_ch_spawnNPCS.setSelected(Boolean.parseBoolean(AppCore.SERVERPROPERTIES.getSpawnNPCS()));
        sp_ch_pvp.setSelected(Boolean.parseBoolean(AppCore.SERVERPROPERTIES.getPVP()));
        sp_ch_allowNether.setSelected(Boolean.parseBoolean(AppCore.SERVERPROPERTIES.getAllowNether()));
        sp_ch_hardcore.setSelected(Boolean.parseBoolean(AppCore.SERVERPROPERTIES.getHardcore()));
    }

    public void setServerProperties() {
        AppCore.SERVERPROPERTIES.setServerIP(sp_t_serverIP.getText());
        AppCore.SERVERPROPERTIES.setOnlineMode(sp_ch_onlineMode.isSelected());
        AppCore.SERVERPROPERTIES.setServerPort(sp_t_serverPort.getText());
        AppCore.SERVERPROPERTIES.setRconPort(sp_t_serverRconPort.getText());
        AppCore.SERVERPROPERTIES.setMOTD(sp_t_motd.getText());
        AppCore.SERVERPROPERTIES.setLevelName(sp_t_levelName.getText());
        AppCore.SERVERPROPERTIES.setDifficulty(sp_cb_difficulty.getSelectedItem().toString());
        AppCore.SERVERPROPERTIES.setGameMode(sp_cb_gameMode.getSelectedItem().toString());
        AppCore.SERVERPROPERTIES.setSpawnMonsters(sp_ch_spawnMonsters.isSelected());
        AppCore.SERVERPROPERTIES.setSpawnNPCS(sp_ch_spawnNPCS.isSelected());
        AppCore.SERVERPROPERTIES.setPVP(sp_ch_pvp.isSelected());
        AppCore.SERVERPROPERTIES.setAllowNether(sp_ch_allowNether.isSelected());
        AppCore.SERVERPROPERTIES.setHardcore(sp_ch_hardcore.isSelected());
    }

    public void serverStarted() {
        sm_t_status.setText("ONLINE");
        sm_t_status.setForeground(new Color(68, 204, 0));
        sm_b_activeServer.setText("Stop Server");

        sm_t_publicIPAddress.setEnabled(true);
        sm_t_privateIPAddress.setEnabled(true);
        sm_t_port.setEnabled(true);
        sm_t_shareThisToYourFriend.setEnabled(true);
        sm_b_refreshNow.setEnabled(true);
        sm_b_copy.setEnabled(true);
        sm_t_privateIPAddress.setEnabled(true);
        sm_b_activeServer.setEnabled(true);
        c_b_enter.setEnabled(true);
        c_t_console.setEnabled(true);
        c_b_enter.setEnabled(true);
        disableMenu();
        am_tb_serverMain.setEnabled(true);
        am_tb_about.setEnabled(true);
        am_b_exit.setEnabled(true);
    }

    public void serverStopped() {
        AppCore.SERVERTIMEREVENT.serverStoppingEvent_stop();
        sm_t_status.setText("OFFLINE");
        sm_t_status.setForeground(Color.RED);
        sm_js_xms.setEnabled(true);
        sm_js_xmx.setEnabled(true);
        sm_b_activeServer.setText("Active Server");
        sm_b_activeServer.setEnabled(true);
        AppCore.addConsole("Server stopped running.");
        enableMenu();
        if (AppCore.getServerThread() != null) {
            if (AppCore.getServerThread().isAlive()) {
                AppCore.getServerThread().addCommand("exit");
                AppCore.getServerThread().terminate();
                AppCore.getServerThread().PROCESS.destroy();
                AppCore.getServerThread().RUNTIME.freeMemory();
                Runtime.getRuntime().freeMemory();
                AppCore.addConsole("Memory successfully cleanned up.");
            }
        }
        sm_l_serverState.setIcon(AppCore.APPUI.getServerOffline());
        c_t_console.setEnabled(false);
        c_b_enter.setEnabled(false);
    }

    public JTextField getTextFieldServerStatus() {
        return sm_t_status;
    }

    public void refreshIP() {
        sm_t_port.setText(AppCore.SERVERPROPERTIES.getServerPort());
        sm_t_privateIPAddress.setText(AppCore.SERVERIPTHREAD.getPrivateIP());
        sm_t_publicIPAddress.setText(AppCore.SERVERIPTHREAD.getPublicIP());
        sm_t_shareThisToYourFriend.setText(AppCore.SERVERIPTHREAD.getPublicIP() + ":" + AppCore.SERVERPROPERTIES.getServerPort());
    }

    public void refreshIPforLocalHost() {
        sm_t_port.setText(AppCore.SERVERPROPERTIES.getServerPort());
        sm_t_privateIPAddress.setText(AppCore.SERVERIPTHREAD.getPrivateIP());
    }

    public void disableAll() {
        sm_t_publicIPAddress.setEnabled(false);
        sm_t_privateIPAddress.setEnabled(false);
        sm_t_port.setEnabled(false);
        sm_t_shareThisToYourFriend.setEnabled(false);
        sm_b_refreshNow.setEnabled(false);
        sm_b_copy.setEnabled(false);
        sm_t_privateIPAddress.setEnabled(false);
        sm_b_activeServer.setEnabled(false);
        c_b_enter.setEnabled(false);
        c_b_enter.setText("<Html>Enter</Html>");
        c_t_console.setEnabled(false);
        disableMenu();
    }

    private void showExitConfirm() {
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit ?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            this.setEnabled(false);
            am_tb_serverMain.setSelected(true);
            p_serverMainJar_smj.setVisible(false);
            p_serverProperties_sp.setVisible(false);
            p_about_ab.setVisible(false);
            p_serverMain_sm.setVisible(true);
            disableMenu();
            sm_b_activeServer.setEnabled(false);
            sm_js_xms.setEnabled(false);
            sm_js_xmx.setEnabled(false);

            this.add(p_serverMain_sm);
            if (sm_b_activeServer.getText().equals("Stop Server") || sm_b_activeServer.getText().equals("<Html>Activating, please wait . . .</Html>")) {
                AppCore.SERVERTIMEREVENT.serverExit_start();
                if (AppCore.getServerThread() != null) {
                    if (AppCore.getServerThread().isAlive()) {
                        AppCore.getServerThread().addCommand("stop");
                        AppCore.getServerThread().terminate();
                    }
                }
                sm_b_activeServer.setText("Stopping Server, please wait...");
            } else {
                AppCore.SERVERTIMEREVENT.serverCleanningAfterExit_start();
            }
        }
    }

    private void disableMenu() {
        am_tb_about.setEnabled(false);
        am_tb_about.setText("<html>About & Donate</html>");
        am_tb_serverMain.setEnabled(false);
        am_tb_serverMain.setText("<html>Server Main</html>");
        am_tb_serverMainJar.setEnabled(false);
        am_tb_serverMainJar.setText("<html>Server Main JAR</html>");
        am_tb_serverProperties.setEnabled(false);
        am_tb_serverProperties.setText("<html>Server Properties</html>");
        am_b_exit.setEnabled(false);
        am_b_exit.setText("<html>Exit</html>");
    }

    private void enableMenu() {
        am_tb_about.setEnabled(true);
        am_tb_serverMain.setEnabled(true);
        am_tb_serverMainJar.setEnabled(true);
        am_tb_serverProperties.setEnabled(true);
        am_b_exit.setEnabled(true);
    }

    public void initPanelServerMainJar() {
        smj_cb_executorMainJar.setEnabled(true);
        smj_b_save.setEnabled(true);
        smj_b_refreshJarList.setEnabled(true);
        smj_rb_fromExistingFile.setEnabled(true);
        smj_rb_fromExistingLink.setEnabled(true);
        smj_t_fromExistingLink.setEditable(true);
        smj_t_fromExistingLink.setText("");
        smj_pb_progress.setValue(0);
        smj_bg_addServerJar.clearSelection();
        smj_l_progres.setText("0.0 MB / 0.0 MB");
        smj_l_statusDownload.setText("Ready");
        selectedFile = null;
        smj_t_fromExistingLink.setEnabled(false);
        smj_t_fromExistingFile.setEnabled(false);
        smj_t_fromExistingFile.setText("");
        smj_b_selectFile.setEnabled(false);
        smj_b_addJar.setEnabled(false);
        smj_b_addJar.setText("<html>Add Jar</html>");
        smj_pb_progress.setStringPainted(false);

        smj_cb_executorMainJar.setModel(new DefaultComboBoxModel<>(AppCore.SERVERJAR.getCBmodel()));
        smj_cb_executorMainJar.setSelectedIndex(AppCore.SERVERJAR.getCBSelectedindex());

        enableMenu();
    }

    public void redirectPanel_serverMainJar() {
        p_serverMain_sm.setVisible(false);
        p_serverProperties_sp.setVisible(false);
        p_about_ab.setVisible(false);
        p_serverMainJar_smj.setVisible(true);
        this.add(p_serverMainJar_smj);
        initPanelServerMainJar();
        forceDownload = false;
        if (cameFromActivatingServer) {
            cameFromActivatingServer = false;
            redirectPanel_serverMain();
        }
    }

    public void redirectPanel_serverMainJar_forceDownloadJar() {
        JOptionPane.showMessageDialog(null, "Your main server JAR is missing, moved to force download page !");
        redirectPanel_serverMainJar();
        forceDownload = true;

        am_tb_serverMainJar.setSelected(true);
        smj_cb_executorMainJar.setEnabled(false);
        String tmp[] = new String[]{"server.jar"};
        smj_cb_executorMainJar.setModel(new DefaultComboBoxModel<>(tmp));
        smj_b_save.setEnabled(false);
        smj_b_refreshJarList.setEnabled(false);
        smj_rb_fromExistingLink.setSelected(true);
        smj_rb_fromExistingFile.setEnabled(false);
        smj_b_addJar.setText("Download");
        smj_rb_fromExistingLink.setSelected(true);
        smj_t_fromExistingLink.setText("https://launcher.mojang.com/v1/objects/bb2b6b1aefcd70dfd1892149ac3a215f6c636b07/server.jar");
        smj_t_fromExistingLink.setCaretPosition(0);
        smj_t_fromExistingLink.setEditable(false);
        smj_b_addJar.setEnabled(true);
        disableMenu();
    }

    private void startedDownloading() {
        smj_b_save.setEnabled(false);
        smj_b_refreshJarList.setEnabled(false);
        smj_rb_fromExistingLink.setEnabled(false);
        smj_rb_fromExistingFile.setEnabled(false);
        smj_cb_executorMainJar.setEnabled(false);
        smj_b_addJar.setEnabled(false);
        smj_t_fromExistingLink.setEditable(false);
        disableMenu();
        smj_l_statusDownload.setText("Downloading . . .");
        AppCore.addConsole("Started downloading JAR.");
    }

    private void startedAddingJar() {
        smj_b_save.setEnabled(false);
        smj_b_refreshJarList.setEnabled(false);
        smj_rb_fromExistingLink.setEnabled(false);
        smj_rb_fromExistingFile.setEnabled(false);
        smj_cb_executorMainJar.setEnabled(false);
        smj_b_addJar.setEnabled(false);
        smj_t_fromExistingLink.setEditable(false);
        disableMenu();
        AppCore.addConsole("Start Adding JAR from : " + smj_t_fromExistingFile.getText());
        smj_l_statusDownload.setText("Copying . . .");
        AppCore.addConsole("Started copying JAR.");
    }

    private void activeServer() {
        if (sm_b_activeServer.getText().equals("Active Server")) {
            AppCore.SERVERTIMEREVENT.serverActivatingEvent_start();
            sm_js_xms.setEnabled(false);
            sm_js_xmx.setEnabled(false);
            sm_t_privateIPAddress.setEnabled(false);
            sm_b_activeServer.setText("<Html>Activating, please wait . . .</Html>");
            sm_b_activeServer.setEnabled(false);
            disableMenu();
        } else {
            AppCore.SERVERTIMEREVENT.serverStoppingEvent_start();
            sm_b_activeServer.setText("<Html>Stopping, please wait . . .</Html>");
            sm_b_activeServer.setEnabled(false);
            if (AppCore.getServerThread().isAlive()) {
                AppCore.getServerThread().addCommand("stop");
            }
            setStateServerOffline();
        }
    }

    private void redirectPanel_serverMain() {
        p_serverMainJar_smj.setVisible(false);
        p_serverProperties_sp.setVisible(false);
        p_serverMain_sm.setVisible(true);
        this.add(p_serverMain_sm);
        am_tb_serverMain.setSelected(true);
    }
}
